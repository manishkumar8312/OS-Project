
#include <iostream>
#include <fstream>
#include <filesystem>
using namespace std;
namespace fs = std::filesystem;

void createFile(const string& filename, const string& content = "") {
    ofstream file(filename);
    if (file) {
        file << content;
        cout << "File '" << filename << "' created successfully.\n";
    } else {
        cerr << "Error creating file.\n";
    }
}

void deleteFile(const string& filename) {
    if (fs::remove(filename)) {
        cout << "File '" << filename << "' deleted successfully.\n";
    } else {
        cerr << "Error: File '" << filename << "' not found.\n";
    }
}

void renameFile(const string& oldName, const string& newName) {
    try {
        fs::rename(oldName, newName);
        cout << "File '" << oldName << "' renamed to '" << newName << "'.\n";
    } catch (const exception& e) {
        cerr << "Error renaming file: " << e.what() << "\n";
    }
}

void copyFile(const string& src, const string& dest) {
    try {
        fs::copy(src, dest, fs::copy_options::overwrite_existing);
        cout << "File '" << src << "' copied to '" << dest << "'.\n";
    } catch (const exception& e) {
        cerr << "Error copying file: " << e.what() << "\n";
    }
}

void moveFile(const string& src, const string& dest) {
    try {
        fs::rename(src, dest);
        cout << "File '" << src << "' moved to '" << dest << "'.\n";
    } catch (const exception& e) {
        cerr << "Error moving file: " << e.what() << "\n";
    }
}

int main() {
    createFile("example.txt", "Hello, C++ File Operations!");
    renameFile("example.txt", "new_example.txt");
    copyFile("new_example.txt", "copy_example.txt");
    moveFile("copy_example.txt", "moved_example.txt");
    deleteFile("new_example.txt");
    deleteFile("moved_example.txt");

    return 0;
}
